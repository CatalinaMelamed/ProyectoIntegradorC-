//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.8.3928.0.
// 

namespace Calculadora2.Services
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "CalculatorSoap", Namespace = "http://tempuri.org/")]
    public partial class Calculator : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback AddOperationCompleted;

        private System.Threading.SendOrPostCallback SubtractOperationCompleted;

        private System.Threading.SendOrPostCallback MultiplyOperationCompleted;

        private System.Threading.SendOrPostCallback DivideOperationCompleted;

        /// <remarks/>
        public Calculator()
        {
            this.Url = "http://www.dneonline.com/calculator.asmx";
        }

        /// <remarks/>
        public event AddCompletedEventHandler AddCompleted;

        /// <remarks/>
        public event SubtractCompletedEventHandler SubtractCompleted;

        /// <remarks/>
        public event MultiplyCompletedEventHandler MultiplyCompleted;

        /// <remarks/>
        public event DivideCompletedEventHandler DivideCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Add", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Add(int intA, int intB)
        {
            object[] results = this.Invoke("Add", new object[] {
                    intA,
                    intB});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAdd(int intA, int intB, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Add", new object[] {
                    intA,
                    intB}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAdd(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddAsync(int intA, int intB)
        {
            this.AddAsync(intA, intB, null);
        }

        /// <remarks/>
        public void AddAsync(int intA, int intB, object userState)
        {
            if ((this.AddOperationCompleted == null))
            {
                this.AddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOperationCompleted);
            }
            this.InvokeAsync("Add", new object[] {
                    intA,
                    intB}, this.AddOperationCompleted, userState);
        }

        private void OnAddOperationCompleted(object arg)
        {
            if ((this.AddCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCompleted(this, new AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Subtract", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Subtract(int intA, int intB)
        {
            object[] results = this.Invoke("Subtract", new object[] {
                    intA,
                    intB});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSubtract(int intA, int intB, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Subtract", new object[] {
                    intA,
                    intB}, callback, asyncState);
        }

        /// <remarks/>
        public int EndSubtract(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void SubtractAsync(int intA, int intB)
        {
            this.SubtractAsync(intA, intB, null);
        }

        /// <remarks/>
        public void SubtractAsync(int intA, int intB, object userState)
        {
            if ((this.SubtractOperationCompleted == null))
            {
                this.SubtractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtractOperationCompleted);
            }
            this.InvokeAsync("Subtract", new object[] {
                    intA,
                    intB}, this.SubtractOperationCompleted, userState);
        }

        private void OnSubtractOperationCompleted(object arg)
        {
            if ((this.SubtractCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubtractCompleted(this, new SubtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Multiply", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Multiply(int intA, int intB)
        {
            object[] results = this.Invoke("Multiply", new object[] {
                    intA,
                    intB});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginMultiply(int intA, int intB, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Multiply", new object[] {
                    intA,
                    intB}, callback, asyncState);
        }

        /// <remarks/>
        public int EndMultiply(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void MultiplyAsync(int intA, int intB)
        {
            this.MultiplyAsync(intA, intB, null);
        }

        /// <remarks/>
        public void MultiplyAsync(int intA, int intB, object userState)
        {
            if ((this.MultiplyOperationCompleted == null))
            {
                this.MultiplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMultiplyOperationCompleted);
            }
            this.InvokeAsync("Multiply", new object[] {
                    intA,
                    intB}, this.MultiplyOperationCompleted, userState);
        }

        private void OnMultiplyOperationCompleted(object arg)
        {
            if ((this.MultiplyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MultiplyCompleted(this, new MultiplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Divide", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Divide(int intA, int intB)
        {
            object[] results = this.Invoke("Divide", new object[] {
                    intA,
                    intB});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDivide(int intA, int intB, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Divide", new object[] {
                    intA,
                    intB}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDivide(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DivideAsync(int intA, int intB)
        {
            this.DivideAsync(intA, intB, null);
        }

        /// <remarks/>
        public void DivideAsync(int intA, int intB, object userState)
        {
            if ((this.DivideOperationCompleted == null))
            {
                this.DivideOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDivideOperationCompleted);
            }
            this.InvokeAsync("Divide", new object[] {
                    intA,
                    intB}, this.DivideOperationCompleted, userState);
        }

        private void OnDivideOperationCompleted(object arg)
        {
            if ((this.DivideCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DivideCompleted(this, new DivideCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AddCompletedEventHandler(object sender, AddCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void SubtractCompletedEventHandler(object sender, SubtractCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubtractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SubtractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void MultiplyCompletedEventHandler(object sender, MultiplyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MultiplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal MultiplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DivideCompletedEventHandler(object sender, DivideCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DivideCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DivideCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}